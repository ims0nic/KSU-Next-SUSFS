name: New KernelSU Next SUSFS 12
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8650'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus12_v'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'pineapple'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android14'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.1'
      BUILD_METHOD:
        description: "编译方式"
        required: true
        default: 'gki'
      KSUNEXT_ENABLED:
        description: "添加 KSU Next"
        required: true
        type: boolean
        default: true
      SUSFS_ENABLED:
        description: "添加 SUSFS"
        required: true
        type: boolean
        default: true
      SUSFS_CI:
        description: "SUSFS调用CI"
        required: true
        type: boolean
        default: true
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Free Disk Space
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq curl
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash
          
#      - name: Setup ccache
#        uses: hendrikmuhs/ccache-action@v1.2
#        with:
#          max-size: 2G

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          # root-reserve-mb: 24576
          # temp-reserve-mb: 8192
          # swap-size-mb: 16384

          root-reserve-mb: 8192
          temp-reserve-mb: 8192
          
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "build"
          git config --global user.email "263623064@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt-get install jq -y
          sudo apt install -y python3 git curl patch bc bison flex libssl-dev

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1

          #### repo init -u https://github.com/RealJohnGalt/opsm8650_kernel_manifest.git -b kplatform-staging -m default.xml
          repo sync
          #### rm -rf kernel_platform/common
          #### git clone --depth=1 https://github.com/RealJohnGalt/kernel_common_oneplus_sm8650.git -b kplatform-staging kernel_platform/common
          
          rm -rf kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm -rf kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Force remove -dirty suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          # git add -A
          # git commit -m "Force remove -dirty suffix from kernel version"

      - name: Set up KernelSU Next
        if: github.event.inputs.KSUNEXT_ENABLED == 'true'
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          cd KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up susfs
        if: github.event.inputs.SUSFS_ENABLED == 'true'
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/WildPlusKernel/kernel_patches.git
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../kernel_patches/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch ./KernelSU-Next/
          cp ../kernel_patches/next/syscall_hooks.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # Apply patches
          cd ./KernelSU-Next
          patch -p1 < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
          cd ../common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true

          # Replace next_hooks.patch with syscall_hooks.patch
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 -F 3 < syscall_hooks.patch

      - name: Apply new hook and add configuration
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Remove check_defconfig
          sed -i '2s/check_defconfig//' ./common/build.config.gki

          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

          ###### Add bbrv3 config setting - TEST!
          cp ../kernel_patches/bbr/tcp_bbr.c ./common/net/ipv4/
          ######

          # Config BBR
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig

          # Add additional tcp_bbr config setting 
          # Enable BBR 
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig 
           
          # Optional: Keep Reno/Cubic as alternatives 
          echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_RENO=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_DEFAULT_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo 'CONFIG_DEFAULT_TCP_CONG="cubic"' >> ./common/arch/arm64/configs/gki_defconfig

          # Enable FQ-CoDel and FQ for Queue Management 
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_NET_SCH_DEFAULT=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_DEFAULT_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo 'CONFIG_DEFAULT_NET_SCH="fq"' >> ./common/arch/arm64/configs/gki_defconfig

      - name: Build kernel
        run: |
         cd kernel_workspace
         export LTO=thin
         #./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
         ### ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
         ### ./kernel_platform/build_with_bazel.py --lto=full -t ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
         
         ./kernel_platform/build_with_bazel.py --lto=thin -t pineapple gki --jobs=$(nproc --all) --verbose_failures --config=stamp --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom --ignore_missing_projects || { echo "Bazel build failed"; exit 1; }
         ### ./kernel_platform/build_with_bazel.py --lto=full -t pineapple gki --jobs=$(nproc --all) --verbose_failures --config=stamp --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom --ignore_missing_projects || { echo "Bazel build failed"; exit 1; }
      
      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cp kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/Image ./AnyKernel3/

      - name: Download Latest SUSFS Module from CI
        if: ${{ github.event.inputs.SUSFS_CI == 'true' }}
        run: |
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs" | jq -r '.workflow_runs[0].id')
          
          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')
          
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs.zip "$ARTIFACT_URL"
          cp ksu_module_susfs.zip ./AnyKernel3/

      - name: Download Latest SUSFS Module from Release
        if: ${{ github.event.inputs.SUSFS_CI == 'false' }}
        run: |
          wget https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip
          cp ksu_module_susfs_1.5.2+.zip ./AnyKernel3/

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: ak3_26mar_${{ env.KSUVER }}_ci_bbr_thin_${{ github.event.inputs.FEIL }}
          path: ./AnyKernel3/*
